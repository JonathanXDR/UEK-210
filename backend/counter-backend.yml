# Erstellen Sie ein Deployment mit dem Label app=counter-backend welches das erstellte Image (ghcr.io/jonathanxdr/counter-backend:v1) in einem Pod in Betrieb nimmt.
# Das Deployment counter-backend darf dabei nicht mit Image-Tag latest laufen und soll auf dem NODE_ENV production laufen

apiVersion: apps/v1
kind: Deployment
metadata:
  name: counter-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: counter-backend
  template:
    metadata:
      labels:
        app: counter-backend
    spec:
      containers:
        - name: counter-backend
          image: ghcr.io/jonathanxdr/counter-backend:v1
          ports:
            - containerPort: 8080
          env:
            - name: npm_config_cache
              value: ./.npm-cache
            - name: NODE_ENV
              value: production
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: counter-database
                  key: db_host
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: counter-database
                  key: database-name
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: counter-database
                  key: database-user
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: counter-database
                  key: database-password
---
# Das Deployment muss die Konfiguration für die Datenbankverbindung beinhalten. Verwenden Sie dazu das bereits erstellte Secret von counter-database und eine neue ConfigMap für die Umgebungsvariable DB_HOST.
apiVersion: v1
kind: ConfigMap
metadata:
  name: counter-database
  labels:
    app: counter-database
data:
  db_host: counter-database
---
# Erstellen Sie einen Service mit dem Namen counter-backend, welcher mit dem Backend-Pod interagiert.
apiVersion: v1
kind: Service
metadata:
  name: counter-backend
spec:
  selector:
    app: counter-backend
  ports:
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 8080
---
# Erstellen Sie eine Route für den Service counter-backend.
# Stellen Sie sicher, dass die Route des counter-backend von http auf https umleitet.
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: counter-backend
  name: counter-backend
spec:
  port:
    targetPort: 8080-tcp
  to:
    kind: Service
    name: counter-backend
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
---

